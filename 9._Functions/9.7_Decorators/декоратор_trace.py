"""Декоратор trace
Реализуйте декоратор trace, который выводит отладочную информацию о декорируемой функции во время ее выполнения,
а именно: имя функции, переданные аргументы и возвращаемое значение в следующем формате:
TRACE: вызов <имя функции>() с аргументами: <кортеж позиционных аргументов>, <словарь именованных аргументов>
TRACE: возвращаемое значение <имя функции>(): <возвращаемое значение>
Также декоратор должен сохранять имя и строку документации декорируемой функции.
"""
import functools


def trace(func):
    """Декоратор, который выводит отладочную информацию о декорируемой функции."""

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        print(f'TRACE: вызов {func.__name__}() с аргументами: {args}, {kwargs}')
        print(f'TRACE: возвращаемое значение {func.__name__}(): {repr(result)}')

    return wrapper


# Для проверки:
@trace
def say(name, line):
    return f'{name}: {line}'


say('Jane', 'Hello, World')


@trace
def sub(a, b, c):
    """прекрасная функция"""
    return a - b + c


print(sub.__name__)
print(sub.__doc__)
sub(20, 5, c=10)
